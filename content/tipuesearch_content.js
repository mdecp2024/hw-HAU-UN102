var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  ldodwua \n 個人倉儲: https://github.com/mdecp2024/hw-HAU-UN102 \n 個人網站: https://mdecp2024.github.io/hw-HAU-UN102/content/index.html \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'Brthon建立', 'text': '\n \n', 'tags': '', 'url': 'Brthon建立.html'}, {'title': 'w10', 'text': '\n \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': 'w11題目一 \n w11題目二 \n \n 我們利用兩種程式來繪製形狀，一種是利用*來畫圓的外框，而另一種則是利用馬賽克來表示圓，對於學設計的我們，可以好好利用程式來幫我們畫圖，進一步來完成一些基本圖形。 \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': 'w12_1 \n \n 第一題:01_string_input_print \n Text, questions, and art (文字、問題和藝術)\xa0 \n 說明:Strings, input(), and print() (字串、input()和print()) \n input() 範例  Where are you from? \n input("Where are you from?") \n print()\xa0 範例  cat \n print (" /\\_/\\ \xa0 ")\nprint (" >^.^< \xa0 ")\nprint (" \xa0/ \\ \xa0 \xa0")\nprint (" (___)___") \n 第二題:02_variables \n Q1:Events and favorites(活動和最愛) \n 說明:Variables and string concatenation(變數和字串連接) \n first_name = "Fernando" # 將 "Fernando" 賦值給變數 first_name\nlast_name = "Pérez"\xa0 \xa0 \xa0 \xa0# 將 "Pérez" 賦值給變數 last_name\n\nprint(first_name)\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 # 輸出變數 first_name 的值，也就是 "Fernando"\nprint(last_name)\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 # 輸出變數 last_name 的值，也就是 "Pérez" \n Q2  名字+最愛的食物 \n \n name = input("What\'s your name?") #變數name為input所輸入之文字\nfavorite_food = input ("What is your favorite food?") #變數favorite_food為input所輸入之文字\nprint ("Hi! My name is " + name) #列印"Hi! My name is "(這段為文字) + name(name這個變數的數值)\nprint ("My favorite food is " + favorite_food)\xa0 #列印"My favorite food is "(這段為文字) + favorite_food(favorite_food這個變數的數值)\nprint (name + "\'s favorite food is " + favorite_food) #列印name (數值)+ \'s favorite food is (此段為文字)+favorite_food(數值) \n \n \n 第三題:\xa0(if)判斷式 \n Q3:\xa0 bookstor \n \n \n programming_books = ["Learn python", "Python for all",\xa0 "Intro to python"] #programming_books變數裡面有3個字串\nprint (programming_books) #列印programming_books變數(會出現三個字串)\nwanted_book = input("Hi! What book would you like to buy?") #設定一個變數為wanted_book其等於input指令回傳之數值\nprint (wanted_book) #列印wanted_book變數\nif wanted_book in programming_books: #如果 "變數wanted_book"回傳之值 在"programming_books"字串當中\n\xa0 \xa0print ("Yes, we sell it!")\xa0\xa0\xa0\xa0\xa0\xa0 #列印 是的我們有販賣\nelse:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 #反之\xa0\xa0\xa0\n\xa0\xa0\xa0\xa0print ("Sorry, we don\'t sell that book") #列印 抱歉我們沒有販賣 \n \n \n 第四題:append() remove() Q4: 購物清單 \n \n \n shopping_list = ["carrots", "chocolate", "olives"] #在shopping_list變數裡面有3個字串\nprint (shopping_list) #列印shopping_list變數\nnew_item = input("What else do I have to buy?") #設定一個變數為new_item其等於input指令回傳之數值\n\xa0\nif new_item in shopping_list:\xa0 #如果 "變數new_item(想買的物品)"回傳之值 在"shopping_list(購物清單)"字串當中就執行以下程式\n\xa0\xa0\xa0\xa0print (new_item + " is/are already in the shopping list") #列印 "new_item變數的數值"+字串is/are already in the shopping list\n\xa0\xa0\xa0\xa0print (shopping_list) #列印shopping_list字串\nelse:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 #反之\n\xa0\xa0\xa0\xa0shopping_list.append(new_item) #購物清單.加入(想要購買的物品)\xa0\xa0\xa0 如果不在購物清單內那就將未在字串中物品加入購物清單\n\xa0\xa0\xa0\xa0print (shopping_list) #列印購物清單\n#以下是移除物品的程式\nitem_to_remove = input("What do I have to remove?") #item_to_remove(想要移除的物品)\n\xa0\nif item_to_remove in shopping_list: #如果 想要移除的物品在購物清單中 那就執行\n\xa0\xa0\xa0\xa0shopping_list.remove(item_to_remove) #把購物清單.移除(想要移除的物品)\n\xa0\xa0\xa0\xa0print (shopping_list) #列印購物清單\nelse:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 #反之\n\xa0\xa0\xa0\xa0print (item_to_remove + " is/are not in the list") #列印 想要移除的物品+is/are not in the list(不在清單中)\n\xa0\xa0\xa0\xa0print (shopping_list) #列印購物清單\n \n 第五題:index() pop() insert() \n Q5: 今日菜單 \n \n \n todays_menu = ["burger", "salad", "coke"]\xa0 #todays_menu變數=今天菜單["burger", "salad", "coke"\nprint(todays_menu) #列印side_dish_index\xa0 列印他在第幾位\n\nide_dish_index = todays_menu.index("salad")\xa0\xa0#side_dish_index變數 = 今日菜單.找出"沙拉"位於字串中第幾個\nprint (side_dish_index)\xa0\xa0#列印side_dish_index\xa0 列印他在第幾位\ntodays_menu.pop(side_dish_index)\xa0\xa0#今日菜單.移除字串中的元素(side_dish_index變數"沙拉")\xa0 這裡意思是移除沙拉\nprint (todays_menu) #列印今日菜單\ntodays_menu.insert(side_dish_index, "fries")\xa0\xa0#今日菜單.在字串中插入(side_dish_index, "fries")\xa0\xa0 這裡意思是加入薯條\nprint (todays_menu)\xa0#列印今日菜單 \n \n \n \n \n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': '程式 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_hw', 'text': '程式 \n', 'tags': '', 'url': 'w14_hw.html'}, {'title': 'w15', 'text': '題目一: 從 1 累加到 100 \n # 初始化變數\nsum = 0\ninit = 1\nupto = 100\n\n# 使用 for 迴圈進行累加\nfor i in range(init, upto + 1):\nsum += i # sum = sum + i 的簡寫\n\n# 顯示結果\nprint(f"從 {init} 累加到 {upto} 的總和是: {sum}") \n 題目二: addto \n # 定義函數 addto\ndef addto(start, end):\n# 初始化累加結果變數\ntotal = 0\n\n# 使用 for 迴圈進行累加\nfor i in range(start, end + 1):\ntotal += i # sum = sum + i 的簡寫\n\n# 返回總和\nreturn total\n\n# 呼叫函數並顯示結果\nresult = addto(1, 100)\nprint(f"從 1 累加到 100 的總和是: {result}") \n 題目三: add_only_even \n # 定義函式 add_only_even\ndef add_only_even(start, end):\n# 初始化偶數累加總和\ntotal = 0\n\n# 使用 for 迴圈遍歷範圍\nfor i in range(start, end + 1):\nif i % 2 == 0: # 檢查是否為偶數\ntotal += i # 累加偶數\n\n# 返回總和\nreturn total\n\n# 呼叫函數並顯示結果\nresult = add_only_even(1, 100)\nprint(f"從 1 累加到 100 的偶數總和是: {result}")\n\n \n 題目四: add_avoid_8 \n # 定義函式 add_avoid_8\ndef add_avoid_8(start, end):\n# 初始化總和變數\ntotal = 0\n\n# 使用 for 迴圈遍歷範圍\nfor i in range(start, end + 1):\n# 檢查數字是否包含 "8"\nif \'8\' not in str(i): # 如果數字轉為字串後不包含 "8"\ntotal += i # 累加\n\n# 返回總和\nreturn total\n\n# 呼叫函數並顯示結果\nresult = add_avoid_8(1, 100)\nprint(f"從 1 累加到 100 (避開包含 \'8\' 的數字) 的總和是: {result}") \n 心得: \n 程式設計過程中，我學會了如何使用 Python 進行數字範圍的條件檢查和累加計算。我體會到將邏輯變成函式的重要性，這不僅讓程式碼更具可塑性，也提高了程式的可讀性。每個題目的設計思考和程式實現過程都讓我加深了對 Python 基本語法結構的理解，尤其是在條件判斷、字串操作和迴圈結構方面的應用。 \n 避開8和3的整數 \n def add_avoid_8(init, addto):\ntotal = 0 # 初始化總和\nfor i in range(init, addto + 1): # 遍歷從 init 到 addto 的數字\n# 如果數字轉換為字串後包含 "8" 或 "3"，則跳過這個數字\nif \'8\' in str(i) or \'3\' in str(i):\ncontinue\ntotal += i # 累加不包含 "8" 或 "3" 的數字\nreturn total # 返回累加的總和\n\n# 呼叫函式並打印結果\nresult = add_avoid_8(1, 100)\nprint(f"從 1 累加到 100（避開包含 \'8\' 或 \'3\' 的數字）的總和是: {result}") \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'HW 2', 'text': '', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w16_exam1', 'text': '程式碼 \n \n \n \n \n  啟動Brython  \n \n \n \n \n \n \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};